function CrownPeakAutocomplete(control, options) {
    var self = this; var _keyTimeout = 250; var _mouseTimeout = 3000; var _minLength = 3; var _highlightStart = "<b>"; var _highlightEnd = "</b>"; var _callbacks = { "opening": null, "opened": null, "selected": null, "closing": null, "closed": null }; var _cps = new CrownPeakSearch("www.crownpeak.com"); var _enabled = false; var _control = null; var _keyTimer = null; var _mouseTimer = null; var _popup = null; var _selectedIndex = -1; var _lastSearch = ""; var _lastResult = null; parseArguments(control, options); function parseArguments(control, options) { if (typeof control === "string") control = document.getElementById(control); _control = control; if (options) { if (options.collection) _cps.collection(options.collection); if (options.timeout || options.timeout == 0) _keyTimeout = options.timeout; if (options.mouseTimeout || options.mouseTimeout == 0) _mouseTimeout = options.mouseTimeout; if (options.minLength || options.minLength == 0) _minLength = options.minLength; if (options.highlightStart) _highlightStart = options.highlightStart; if (options.highlightEnd) _highlightEnd = options.highlightEnd; if (options.opening) _callbacks.opening = options.opening; if (options.opened) _callbacks.opened = options.opened; if (options.selected || options.callback) _callbacks.selected = options.selected || options.callback; if (options.closing) _callbacks.closing = options.closing; if (options.closed) _callbacks.closed = options.closed; } } function myAttachEvent(el, ev, fn) { if (el.attachEvent) el.attachEvent("on" + ev, fn); else if (el.addEventListener) el.addEventListener(ev, fn, false); } function myDetachEvent(el, ev, fn) { if (el.detachEvent) el.detachEvent("on" + ev, fn); else if (el.removeEventListener) el.removeEventListener(ev, fn); } function initInternal() { myAttachEvent(document, "mouseup", documentMouseUpHandler); enableInternal(true); } function enableInternal(enabled) { if (enabled && !_enabled) { clearKeyTimer(); myAttachEvent(_control, "keyup", controlKeyUpHandler); myAttachEvent(_control, "keydown", controlKeyDownHandler); myAttachEvent(_control, "blur", controlBlurHandler); myAttachEvent(_control, "click", controlClickHandler); } else if (!enabled && _enabled) { removePopup(); myDetachEvent(_control, "keyup", controlKeyUpHandler); myDetachEvent(_control, "keydown", controlKeyDownHandler); myDetachEvent(_control, "blur", controlBlurHandler); myDetachEvent(_control, "click", controlClickHandler); } _enabled = enabled; } function createPopup() { if (!_popup) { _popup = document.createElement("ul"); _popup.className = "autocomplete-popup"; _popup.style.top = _control.offsetTop + _control.offsetHeight + "px"; _popup.style.left = _control.offsetLeft + "px"; _popup.style.minWidth = _control.offsetWidth + "px"; myAttachEvent(_popup, "mouseup", autocompleteMouseUpHandler); myAttachEvent(_popup, "mouseover", autocompleteMouseOverHandler); myAttachEvent(_popup, "mouseout", autocompleteMouseOutHandler); callback("opening", _popup); _control.offsetParent.appendChild(_popup); } _selectedIndex = -1; } function setPopup(content) { if (!content) { removePopup(); } else { createPopup(); _popup.innerHTML = content; callback("opened", _popup); } } function removePopup() { clearKeyTimer(); clearMouseTimer(); if (_popup) { callback("closing", _popup); _popup.parentElement.removeChild(_popup); callback("closed", _popup); _popup = null; } } function setSelected(n) { if (_popup && _enabled && _selectedIndex != n) { var items = _popup.children; for (var i = 0, len = items.length; i < len; i++) { var item = items[i]; if (i == n && item.className !== "selected") { item.className = "selected"; } else if (item.className === "selected") { item.className = ""; } } _selectedIndex = n; } } function moveSelected(c) { if (_popup) { var n = _selectedIndex + c; var items = _popup.children; if (n < 0) n = items.length - 1; else if (n >= items.length) n = 0; setSelected(n); } } function clearKeyTimer() { if (_keyTimer) { window.clearTimeout(_keyTimer); _keyTimer = null; } } function resetKeyTimer() { clearKeyTimer(); if (_enabled) { _keyTimer = window.setTimeout(keyTimerTick, _keyTimeout); } } function keyTimerTick() { _keyTimer = null; if (_enabled) { if (_control.value && _control.value.length && _control.value.length >= _minLength) { var text = _control.value; if (text != _lastSearch) { var prefix = text.replace(/[ ]+$/, ""); var suffix = text; var index = prefix.lastIndexOf(" "); if (index >= 0) { suffix = prefix.substr(index + 1); prefix = prefix.substr(0, index + 1); } else { prefix = ""; } _cps.autocomplete(suffix.toLocaleLowerCase ? suffix.toLocaleLowerCase() : suffix.toLowerCase()).done(function (data) { var html = []; var re = new RegExp(suffix); if (data.suggestions && data.suggestions.length) { for (var i = 0, len = data.suggestions.length; i < len; i++) { var s = data.suggestions[i]; html.push("<li><a href=\"#\" data-text=\"" + escape(prefix + s) + "\">" + s.replace(re, _highlightStart + prefix + suffix + _highlightEnd) + "</a></li>"); } } _lastResult = html.join(""); setPopup(_lastResult); }); _lastSearch = text; } } else { removePopup(); } } } function autocompleteMouseUpHandler(event) { var e = event.target || event.srcElement; if (e) { while (e && e.tagName && e.tagName != "A") e = e.parentElement; var text = getData(e); removePopup(); if (text) callback("selected", text); } event.cancelBubble = true; event.returnValue = false; return false; } function autocompleteMouseOverHandler() { clearMouseTimer(); } function autocompleteMouseOutHandler() { resetMouseTimer(); } function clearMouseTimer() { if (_mouseTimer) { window.clearTimeout(_mouseTimer); _mouseTimer = null; } } function resetMouseTimer() { clearMouseTimer(); if (_enabled) { _mouseTimer = window.setTimeout(mouseTimerTick, _mouseTimeout); } } function mouseTimerTick() { removePopup(); } function controlBlurHandler() { window.setTimeout(function () { removePopup(); }, 100); } function controlClickHandler(event) { if (!_popup && _control.value == _lastSearch && _lastResult) { _selectedIndex = -1; setPopup(_lastResult); if (event.cancelable) event.preventDefault(true); return false; } } function controlKeyUpHandler(event) { if (event.keyCode !== 13 && event.keyCode !== 40 && event.keyCode !== 38 && event.keyCode !== 27) { resetKeyTimer(); } } function controlKeyDownHandler(event) { if (event.keyCode === 40) { if (!_popup && _control.value == _lastSearch && _lastResult) { _selectedIndex = -1; setPopup(_lastResult); } else { moveSelected(1); } } else if (event.keyCode === 38) { moveSelected(-1); } else if (event.keyCode === 27 && _popup) { removePopup(); if (event.cancelable) event.preventDefault(true); return false; } else if (event.keyCode === 13) { if (_popup && _selectedIndex >= 0) { var items = _popup.children; for (var i = 0, len = items.length; i < len; i++) { if (items[i].className === "selected") { var text = getData(items[i].children[0]); callback("selected", text); } } removePopup(); } } } function documentMouseUpHandler() { if (_popup) { removePopup(); } } function getData(el) { return unescape(el.getAttribute("data-text")); } function callback(callbackName, data) { var cb = _callbacks[callbackName]; if (cb && cb.call) cb.call(cb, data); } this.collection = function (value) { if (value !== undefined) _cps.collection(value); return _cps.collection(); }; this.popup = function () { return _popup; }
    this.init = function (control, options) { parseArguments(control, options); initInternal(); }; this.enable = function (enabled) {
        if (enabled != null && enabled !== undefined) enableInternal(enabled); else
            enableInternal(true);
    }; this.disable = function () { enableInternal(false); }; this.hide = function () { removePopup(); }
}